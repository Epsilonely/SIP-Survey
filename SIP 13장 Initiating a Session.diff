13. Initiating a Session

13.1 Overview

> When a user agent client desires to initiate a session (for example, audio, video, or a game), it formulates an INVITE request.  The INVITE request asks a server to establish a session.  This request may be forwarded by proxies, eventually arriving at one or more UAS that can potentially accept the invitation.  These UASs will frequently need to query the user about whether to accept the invitation.  After some time, those UASs can accept the invitation (meaning the session is to be established) by sending a 2xx response. If the invitation is not accepted, a 3xx, 4xx, 5xx or 6xx response is sent, depending on the reason for the rejection. Before sending a final response, the UAS can also send provisional responses (1xx) to advise the UAC of progress in contacting the called user.
UAC가 세션(예: 오디오, 비디오 또는 게임)을 게시하고자 할때, INVITE 요청을 작성한다. INVITE 요청은 서버에 세션을 설정하도록 요청한다. 이 요청은 프록시를 통해 전달될 수 있으며, 결국 초대를 수락할 수 있는 하나 이상의 UAS에 도착하게 된다. 이러한 UAS는 종종 사용자에게 초대를 수락할지 여부를 쿼리해야한다. 일정 시간이 지나면 해당 UAS는 2xx 응답을 전송하여 초대를 수락(세션이 설정됨을 의미)할 수 있다. 초대가 수락되지 않으면 거부 사유에 따라 3xx, 4xx, 5xx, 6xx 응답이 전송된다. 최종 응답을 보내기 전에 UAS는 임시 응답 (1xx)을 전송하여 호출된 사용자와의 연락 진행 상황을 UAC에 알릴 수도 있다.


> After possibly receiving one or more provisional responses, the UAC will get one or more 2xx responses or one non-2xx final response. Because of the protracted amount of time it can take to receive final responses to INVITE, the reliability mechanisms for INVITE transactions differ from those of other requests (like OPTIONS). Once it receives a final response, the UAC needs to send an ACK for every final response it receives.  The procedure for sending this ACK depends on the type of response.  For final responses between 300 and 699, the ACK processing is done in the transaction layer and follows one set of rules (See Section 17).  For 2xx responses, the ACK is generated by the UAC core.
하나 이상의 임시 응답을 받은 후, UAC는 하나 이상의 2xx 응답 또는 2xx가 아닌 최종 응답 하나를 받게 된다. INVITE에 대한 최종 응답을 받는 데 시간이 오래 걸릴 수 있기 때문에 INVITE 트랜잭션의 신뢰성 메커니즘은 다른 요청(예: OPTIONS)의 메커니즘과 다르다. 최종 응답을 받으면 UAC는 수신하는 모든 최종 응답에 대해 ACK를 보내야 한다. 이 ACK를 보내는 절차는 응답 유형에 따라 다르다. 300 ~ 699 사이의 최종 응답의 경우 ACK 처리는 트랜잭션 계층에서 수행되며 한 세트의 규칙을 따른다(섹션 17 참조). 2xx 응답의 경우 ACK는 UAC 코어에서 생성된다.


> A 2xx response to an INVITE establishes a session, and it also creates a dialog between the UA that issued the INVITE and the UA that generated the 2xx response.  Therefore, when multiple 2xx responses are received from different remote UAs (because the INVITE forked), each 2xx establishes a different dialog.  All these dialogs are part of the same call.
INVITE에 대한 2xx 응답은 세션을 설정하며, INVITE를 발급한 UA와 2xx 응답을 생성한 UA 사이에 다이얼로그를 생성한다. 따라서 서로 다른 원격 UA로부터 여러 개의 2xx 응답이 수신되면(INVITE가 fork되었기 때문에) 각 2xx는 서로 다른 다이얼로그를 설정한다. 이러한 모든 다이얼로그는 동일한 call의 일부이다.


13.2 UAC Processing

13.2.1 Creating the Initial INVITE

> Since the initial INVITE represents a request outside of a dialog, its construction follows the procedures of Section 8.1.1.  Additional processing is required for the specific case of INVITE.
초기 INVITE는 다이얼로그 외부의 요청을 나타내므로, 그 구성은 섹션 8.1.1의 절차를 따른다. INVITE의 특정 케이스에는 추가 처리가 필요하다. 


> An Allow header field (Section 20.5) SHOULD be present in the INVITE. It indicates what methods can be invoked within a dialog, on the UA sending the INVITE, for the duration of the dialog.  For example, a UA capable of receiving INFO requests within a dialog [34] SHOULD include an Allow header field listing the INFO method.
Allow 헤더 필드(섹션 20.5)는 INVITE에 있어야 한다. 이 필드는 다이얼로그 내에서, INVITE를 전송하는 UA에서 다이얼로그가 지속되는 동안 호출할 수 있는 메소드를 나타낸다. 예를 들어, 다이얼로그 내에서 INFO 요청을 수신할 수 있는 UA는 INFO 메서드를 나열하는 Allow헤더 필드를 포함해야 된다.

> A Supported header field (Section 20.37) SHOULD be present in the INVITE.  It enumerates all the extensions understood by the UAC.
Supported 헤더 필드(섹션 20.37)가 INVITE에 있어야 한다. UAC가 이해하는 모든 확장자를 열거한다.

> An Accept (Section 20.1) header field MAY be present in the INVITE. It indicates which Content-Types are acceptable to the UA, in both the response received by it, and in any subsequent requests sent to it within dialogs established by the INVITE.  The Accept header field is especially useful for indicating support of various session description formats.
Accept 헤더 필드(섹션 20.1)는 INVITE에 있을 수 있다. 이 헤더 필드는 UA가 수신한 응답과 INVITE에 의해 설정된 다이얼로그 내에서 전송된 후속 요청 모두에서 UA가 수락할 수 있는 콘텐츠 유형을 나타낸다. Accept 헤더 필드는 다양한 세션 기술 형식의 지원요소를 나타내는 데 특히 유용하다.

> The UAC MAY add an Expires header field (Section 20.19) to limit the validity of the invitation.  If the time indicated in the Expires header field is reached and no final answer for the INVITE has been received, the UAC core SHOULD generate a CANCEL request for the INVITE, as per Section 9.
UAC는 초대의 유효성을 제한하기 위해 Expires 헤더 필드 (섹션 20.19)를 추가할 수 있다. Expires 헤더 필드에 표시된 시간에 도달했지만 INVITE에 대한 최종 응답이 수신되지 않은 경우, UAC 코어는 섹션9에 따라 INVITE에 대한 CANCEL 요청을 생성해야 한다.

> A UAC MAY also find it useful to add, among others, Subject (Section 20.36), Organization (Section 20.25) and User-Agent (Section 20.41 header fields.  They all contain information related to the INVITE.
UAC는 특히 Subject, Organization, User-Agent를 추가하는 것이 유용할 수 있다. 이 필드들은 모두 INVITE와 관련된 정보를 포함한다.

> The UAC MAY choose to add a message body to the INVITE.  Section 8.1.1.10 deals with how to construct the header fields -- Content-Type among others -- needed to describe the message body.
UAC는 INVITE에 메시지 body를 추가하도록 선택할 수 있다. 섹션 8.1.1.10에서는 메시지 body을 구성하는 데 필요한 헤더(특히 Content-Type)를 구성하는 방법을 다룬다.


> There are special rules for message bodies that contain a session description - their corresponding Content-Disposition is "session". SIP uses an offer/answer model where one UA sends a session description, called the offer, which contains a proposed description of the session.  The offer indicates the desired communications means (audio, video, games), parameters of those means (such as codec types) and addresses for receiving media from the answerer.  The other UA responds with another session description, called the answer, which indicates which communications means are accepted, the parameters that apply to those means, and addresses for receiving media from the offerer. An offer/answer exchange is within the context of a dialog, so that if a SIP INVITE results in multiple dialogs, each is a separate offer/answer exchange.  The offer/answer model defines restrictions on when offers and answers can be made (for example, you cannot make a new offer while one is in progress). This results in restrictions on where the offers and answers can appear in SIP messages.  In this specification, offers and answers can only appear in INVITE requests and responses, and ACK.  The usage of offers and answers is further restricted.  For the initial INVITE transaction, the rules are:
session description이 포함된 메시지 body에는 해당 Content-Disposition이 "session"인 특수 규칙이 있다. SIP는 한 UA가 세션에 대한 제안된 기술을 포함하는 offer라고 하는 session description을 전송하는 offer/answer 모델을 사용한다. offer는 원하는 통신 수단(오디오, 비디오, 게임), 해당 수단의 매개변수(예: 코덱 유형) 및 응답자로부터 미디어를 수신하기 위한 주소를 나타낸다. 다른 UA는 answer라고 하는 또 다른 session description으로 응답하며, 여기에는 허용되는 통신 수단, 해당 수단에 적용되는 매개변수 및 제안자로부터 미디어를 수신하기 위한 주소가 표시된다. offer/answer 교환은 다이얼로그의 컨텍스트 내에서 이루어지므로 SIP INVITE로 인해 여러 다이얼로그가 생성되는 경우 각각 별도의 offer/answer 교환이 이루어진다.  offer/answer 모델은 offer와 answer을 할 수 있는 시점에 대한 제한을 정의한다(예: 한 offer가 진행 중인 동안에는 새 offer를 할 수 없음). 이로 인해 SIP 메시지에서 offer와 answer이 표시될 수 있는 위치에 제한이 생긴다. 이 사양에서 offer와 answer은 INVITE 요청 및 응답과 ACK에만 표시될 수 있다. offer와 answer의 사용은 더욱 제한된다. 초기 INVITE 트랜잭션의 경우 규칙은 다음과 같다:

>		The initial offer MUST be in either an INVITE or, if not there, in the first reliable non-failure message from the UAS back to the UAC.  In this specification, that is the final 2xx response.
		초기 offer는 반드시 INVITE에 포함되어야 하며, 그렇지 않은 경우 UAS에서 UAC로 보내는 신뢰할 수 있는 첫 번째 non-failure 메시지에 포함되어야 한다. 이 사양에서는 이것이 최종 2xx 응답이다.
		
>		If the initial offer is in an INVITE, the answer MUST be in a reliable non-failure message from UAS back to UAC which is correlated to that INVITE.  For this specification, that is only the final 2xx response to that INVITE.  That same exact answer MAY also be placed in any provisional responses sent prior to the answer.  The UAC MUST treat the first session description it receives as the answer, and MUST ignore any session descriptions in subsequent responses to the initial INVITE.
		초기 offer가 INVITE에 있는 경우, answer은 반드시 해당 INVITE와 연관된 신뢰할 수 있는 non-failure 메시지로 UAS에서 UAC로 되돌아오는 것이어야 한다. 이 사양의 경우, 이는 해당 INVITE에 대한 최종 2xx 응답일 뿐이다. answer 이전에 전송된 모든 provisinal 응답에도 동일한 answer가 포함될 수 있다. UAC는 수신한 첫 번째 session description을 answer로 취급해야 하며, 초기 INVITE에 대한 후속 응답의 session description은 무시해야 한다.
		
>		If the initial offer is in the first reliable non-failure message from the UAS back to UAC, the answer MUST be in the acknowledgement for that message (in this specification, ACK for a 2xx response).
		초기 offer가 UAS에서 UAC로 되돌아오는 첫 번째 신뢰할 수 있는 non-failure 메시지인 경우, answer은 반드시 해당 메시지에 대한 승인에 포함되어야 한다(이 사양에서는 2xx 응답에 대한 ACK).
		
>		After having sent or received an answer to the first offer, the UAC MAY generate subsequent offers in requests based on rules specified for that method, but only if it has received answers to any previous offers, and has not sent any offers to which it hasn't gotten an answer.
		첫 번째 offer에 대한 answer을 보내거나 받은 후 UAC는 해당 메서드 지정된 규칙에 따라 요청에서 후속 offer를 생성할 수 있다. 그러나 UAC는 이전 offer에 대한 answer을 받은 경우에만 후속 offer를 생성하며, 아직 answer을 받지 못한 offer를 보낸 적이 없어야 한다.
		
>		Once the UAS has sent or received an answer to the initial offer, it MUST NOT generate subsequent offers in any responses to the initial INVITE.  This means that a UAS based on this specification alone can never generate subsequent offers until completion of the initial transaction.
		UAS가 초기 offer에 대한 answer을 보내거나 받은 후에는 초기 INVITE에 대한 응답에서 후속 offer를 생성해서는 안된다. 즉, 이 사양을 기반으로 하는 UAS는 초기 트랜잭션이 완료될 때까지 후속 offer를 생성할 수 없다.

> Concretely, the above rules specify two exchanges for UAs compliant to this specification alone - the offer is in the INVITE, and the answer in the 2xx (and possibly in a 1xx as well, with the same value), or the offer is in the 2xx, and the answer is in the ACK. All user agents that support INVITE MUST support these two exchanges.
구체적으로, 위의 규칙은 이 사양을 준수하는 UA에 대해서만 offer가 INVITE에 있고 answer가 2xx에 있거나(동일한 값을 가진 1xx에도 있을 수 있음), offer가 2xx에 있고 answer가 ACK에 있는 두 가지 교환을 지정한다. INVITE를 지원하는 모든 UA는 이 두가지 교환을 지원해야한다.

> The Session Description Protocol (SDP) (RFC 2327 [1]) MUST be supported by all user agents as a means to describe sessions, and its usage for constructing offers and answers MUST follow the procedures defined in [13].
모든 UA는 세션을 기술하는 수단으로 SDP를 지원해야하며, offer 및 answer을 구성하는 데 SDP를 사용하는 것은 [13]에 정의된 절차를 따라야 한다.

> The restrictions of the offer-answer model just described only apply to bodies whose Content-Disposition header field value is "session". Therefore, it is possible that both the INVITE and the ACK contain a body message (for example, the INVITE carries a photo (Content-Disposition: render) and the ACK a session description (Content-Disposition: session)).
앞에서 설명한 offer-answer 모델의 제한 사항은 Content-Disposition 헤더 필드 값이 "session"인 body에만 적용된다. 따라서 INVITE와 ACK에 모두 body 메시지가 포함될 수 있다(예: INVITE에는 사진(Content-Disposition: render)이 포함되고 ACK에는 session description (Content-Disposition: session)이 포함될 수 있다.

> If the Content-Disposition header field is missing, bodies of Content-Type application/sdp imply the disposition "session", while other content types imply "render".
Content-Dispostion 헤더 필드가 누락된 경우 body의 Content-Type: application/sdp는 "session" 처리를 의미하고, 다른 콘텐츠 유형은 "render"를 의미한다. 

> Once the INVITE has been created, the UAC follows the procedures defined for sending requests outside of a dialog (Section 8).  This results in the construction of a client transaction that will ultimately send the request and deliver responses to the UAC.
INVITE가 생성되면 UAC는 다이얼로그 외부로 요청을 보내기 위해 정의된 절차를 따른다(섹션 8). 그 결과 클라이언트 트랜잭션이 생성되어 궁극적으로 요청을 전송하고 UAC에 응답을 전달한다.



13.2.2 Processing INVITE Responses

> Once the INVITE has been passed to the INVITE client transaction, the UAC waits for responses for the INVITE.  If the INVITE client transaction returns a timeout rather than a response the TU acts as if a 408 (Request Timeout) response had been received, as described in Section 8.1.3.
INVITE가 INVITE 클라이언트 트랜잭션에 전달되면, UAC는 INVITE에 대한 응답을 기다린다. INVITE 클라이언트 트랜잭션이 응답이 아닌 timeout을 반환하면 TU는 섹션 8.1.3에 설명된 대로 408 (Request Timeout) 응답이 수신된 것처럼 작동한다.


13.2.2.1 1xx Responses

> Zero, one or multiple provisional responses may arrive before one or more final responses are received.  Provisional responses for an INVITE request can create "early dialogs".  If a provisional response has a tag in the To field, and if the dialog ID of the response does not match an existing dialog, one is constructed using the procedures defined in Section 12.1.2.
하나 이상의 최종 응답을 받기 전에 0개, 하나 또는 여러 개의 provisional 응답이 도착할 수 있다. 초대 요청에 대한 provisional 응답은 "early dialogs"를 만들 수 있다. provisional 응답에 To 태그가 있고 응답의 다이얼로그 ID가 기존 다이얼로그와 일치하지 않으면 섹션 12.1.2에 정의된 절차를 사용하여 다이얼로그가 만들어 진다.

> The early dialog will only be needed if the UAC needs to send a request to its peer within the dialog before the initial INVITE transaction completes.  Header fields present in a provisional response are applicable as long as the dialog is in the early state (for example, an Allow header field in a provisional response contains the methods that can be used in the dialog while this is in the early state).
early 다이얼로그는 초기 INVITE 트랜잭션이 완료되기 전에 UAC가 다이얼로그 내에서 peer에게 요청을 보내야 하는 경우에만 필요하다. provisional 응답에 있는 헤더 필드는 다이얼로그가 early 상태인 한 적용 가능하다(예: provisional 응답의 Allow 헤더 필드에는 다이얼로그 early 상태인 동안 사용할 수 있는 메서드가 포함되어 있다).


13.2.2.2 3xx Responses

> A 3xx response may contain one or more Contact header field values providing new addresses where the callee might be reachable. Depending on the status code of the 3xx response (see Section 21.3), the UAC MAY choose to try those new addresses.
그 3xx 응답에는 발신자(Callee)에게 연결할 수 있는 새 주소를 제공하는 하나 이상의 Contact 헤더 필드 값이 포함될 수 있다. 3xx 응답의 상태코드(섹션 21.3 참조)에 따라 UAC는 이러한 새 주소를 시도하도록 선택할 수 있다.


13.2.2.3 4xx, 5xx and 6xx Responses

> A single non-2xx final response may be received for the INVITE.  4xx, 5xx and 6xx responses may contain a Contact header field value indicating the location where additional information about the error can be found.  Subsequent final responses (which would only arrive under error conditions) MUST be ignored.
INVITE에 대해 2xx가 아닌 하나의 최종 응답이 수신될 수 있다. 4xx, 5xx 및 6xx 응답에는 오류에 대한 추가 정보를 찾을 수 있는 위치를 나타내는 Contact 헤더 필드 값이 포함될 수 있다. 이후의 최종 응답(오류 조건에서만 도착하는 응답)은 무시해야 한다.

> All early dialogs are considered terminated upon reception of the non-2xx final response.
모든 early 다이얼로그는 2xx가 아닌 최종 응답을 수신하면 종료된 것으로 간주된다.

> After having received the non-2xx final response the UAC core considers the INVITE transaction completed.  The INVITE client transaction handles the generation of ACKs for the response (see Section 17).
'2xx' 가 아닌 최종 응답을 수신한 후 UAC 코어는 INVITE 트랜잭션이 완료된 것으로 간주된다. INVITE 클라이언트 트래잭션은 응답에 대한 ACK 생성을 처리한다(섹션 17 참조).


13.2.2.4 2xx Responses

> Multiple 2xx responses may arrive at the UAC for a single INVITE request due to a forking proxy.  Each response is distinguished by the tag parameter in the To header field, and each represents a distinct dialog, with a distinct dialog identifier.
fork proxy로 인해 단일 INVITE 요청에 대해 여러 개의 2xx 응답이 UAC에 도착할 수 있다. 각 응답은 To 태그 매개변수로 구분되며, 각 응답은 고유한 다이얼로그 식별자를 가진 고유한 다이얼로그를 나타낸다.

> If the dialog identifier in the 2xx response matches the dialog identifier of an existing dialog, the dialog MUST be transitioned to the "confirmed" state, and the route set for the dialog MUST be recomputed based on the 2xx response using the procedures of Section 12.2.1.2.  Otherwise, a new dialog in the "confirmed" state MUST be constructed using the procedures of Section 12.1.2.
'2xx' 응답의 다이얼로그 식별자가 기존 다이얼로그의 다이얼로그 식별자와 일치하는 경우 다이얼로그를 "confirmed" 상태로 전환하고 다이얼로그에 설정된 경로를 섹션 12.2.1.2의 절차에 따라 "confirmed" 상태의 새 다이얼로그를 구성해야 한다.

>	Note that the only piece of state that is recomputed is the route set.  Other pieces of state such as the highest sequence numbers (remote and local) sent within the dialog are 	not recomputed.  The route set only is recomputed for backwards compatibility.  RFC 2543 did not mandate mirroring of the Record-Route header field in a 1xx, only 2xx.  However, we cannot update the entire state of the dialog, since mid-dialog requests may have been sent within the early dialog, modifying the sequence numbers, for example.
	다시 설정된 상태는 route set뿐이다. 다이얼로그 내에서 전송된 가장 높은 시퀀스 번호(원격 및 로컬)와 같은 다른 상태 조각은 다시 설정되지 않는다.
	이전 버전과의 호환성을 위해 route set만 재설정 한다. RFC 2543에서는 Record-Route 헤더 필드를 1xx로 미러링하지 않고 2xx로만 미러링하도록 규정하고 있다. 그러나 예를 들어 early 다이얼로그 내에서 시퀀스 번호를 수정하는 등의 중간 다이얼로그 요청이 전송되었을 수 있으므로 다이얼로그의 전체 상태를 업데이트 할 수는 없다.
	
> The UAC core MUST generate an ACK request for each 2xx received from the transaction layer.  The header fields of the ACK are constructed in the same way as for any request sent within a dialog (see Section 12) with the exception of the CSeq and the header fields related to authentication.  The sequence number of the CSeq header field MUST be the same as the INVITE being acknowledged, but the CSeq method MUST be ACK.  The ACK MUST contain the same credentials as the INVITE.  If the 2xx contains an offer (based on the rules above), the ACK MUST carry an answer in its body.  If the offer in the 2xx response is not acceptable, the UAC core MUST generate a valid answer in the ACK and then send a BYE immediately.
UAC 코어는 트랜잭션 레이어에서 수신한 각 2xx에 대해 ACK 요청을 생성해야 한다. ACK의 헤더 필드는 다이얼로그 내에서 전송된 요청과 동일한 방식으로 구성된다(섹션 12 참조). 단, CSeq 및 인증과 관련된 헤더 필드는 예외다. CSeq 헤더 필드의 시퀀스 번호는 승인되는 INVITE와 동일해야 하지만, CSeq 메서드는 반드시 ACK여야 한다. ACK에는 INVITE와 동일한 자격 증명이 포함되어야 한다. 2xx에 offer가 포함된 경우(위의 규칙에 따라), ACK는 반드시 응답에 body를 포함해야 한다. 2xx 응답의 offer를 수락할 수 없는 경우, UAC 코어는 ACK에 유효한 응답을 생성한 다음 즉시 BYE를 보내야 한다.

> Once the ACK has been constructed, the procedures of [4] are used to determine the destination address, port and transport.  However, the request is passed to the transport layer directly for transmission, rather than a client transaction.  This is because the UAC core handles  retransmissions of the ACK, not the transaction layer.  The ACK MUST be passed to the client transport every time a retransmission of the 2xx final response that triggered the ACK arrives.
ACK가 구성되면 [4]의 절차에 따라 목적지 주소, 포트 및 전송을 결정한다. 그러나 요청은 클라이언트 트랜잭션이 아닌 전송을 위해 전송 계층으로 직접 전달된다. 이는 UAC 코어가 트랜잭션 계층이 아닌 ACK의 재전송을 처리하기 때문이다. ACK를 트리거한 2xx 최종 응답의 재전송이 도착할 때마다 ACK를 클라이언트 전송으로 전달해야 한다.

> The UAC core considers the INVITE transaction completed 64*T1 seconds after the reception of the first 2xx response.  At this point all the early dialogs that have not transitioned to established dialogs are terminated.  Once the INVITE transaction is considered completed by the UAC core, no more new 2xx responses are expected to arrive.
UAC 코어는 첫 번째 2xx 응답을 수신한 후 64*T1초 후에 INVITE 트랜잭션이 완료된 것으로 간주한다. 이 시점에서 기존 다이얼로그로 전환되지 않은 모든 early 다이얼로그가 종료된다. UAC 코어에서 INVITE 트랜잭션이 완료된 것으로 간주되면 더 이상 새로운 2xx 응답이 도착하지 않을 것으로 예상된다.

> If, after acknowledging any 2xx response to an INVITE, the UAC does not want to continue with that dialog, then the UAC MUST terminate the dialog by sending a BYE request as described in Section 15.
INVITE에 대한 2xx 응답을 확인한 후 UAC가 해당 다이얼로그를 계속 진행하지 않으려는 경우, UAC는 섹션 15에 설명된 대로 BYE 요청을 전송하여 다이얼로그를 종료해야 한다.



13.3 UAS Processing

13.3.1 Processing of the INVITE

> The UAS core will receive INVITE requests from the transaction layer. It first performs the request processing procedures of Section 8.2, which are applied for both requests inside and outside of a dialog.
UAS 코어는 트랜잭션 계층에서 INVITE 요청을 받는다. 먼저 섹션 8.2의 요청 처리 절차를 수행하며, 이는 다이얼로그 내무 및 외부 요청 모두에 적용된다.

> Assuming these processing states are completed without generating a response, the UAS core performs the additional processing steps:
이러한 처리 상태가 응답을 생성하지 않고 완료되었다고 가정하면 UAS 코어는 추가 처리 단계를 수행한다:

>	1. If the request is an INVITE that contains an Expires header field, the UAS core sets a timer for the number of seconds indicated in the header field value.  When the timer fires, the invitation is considered to be expired.  If the invitation expires before the UAS has generated a final response, a 487 (Request Terminated) response SHOULD be generated.
	1. 요청에 Expires 헤더 필드가 포함된 INVITE인 경우, UAS 코어는 헤더 필드 값에 표시된 시간(초) 동안 타이머를 설정한다. 타이머가 실행되면 초대가 만료된 것으로 간주된다. UAS가 최종 응답을 생성하기 전에 초대가 만료되면 487 (Request Terminated) 응답이 생성되어야 한다.
	
> 	2. If the request is a mid-dialog request, the method-independent processing described in Section 12.2.2 is first applied.  It might also modify the session; Section 14 provides details.
	2. 요청이 mid-dialog 요청인 경우, 섹션 12.2.2에 설명된 메서드 독립적 처리가 먼저 적용된다. 또한 세션을 수정할 수 도 있다. 섹션 14에 자세한 내용이 나와 있다.
	
>	3. If the request has a tag in the To header field but the dialog identifier does not match any of the existing dialogs, the UAS may have crashed and restarted, or may have received a request for a different (possibly failed) UAS.  Section 12.2.2 provides guidelines to achieve a robust behavior under such a situation.
	3. 요청에 To 태그가 있지만 다이얼로그 식별자가 기존 다이얼로그와 일치하지 않는 경우 UAS가 충돌한 후 다시 시작되었거나 다른(실패했을 수 있는) UAS에 대한 요청을 받았을 수 있다. 섹션 12.2.2에는 이러한 상황에서 견고한 동작을 달성하기 위한 지침을 제공한다.
	
> Processing from here forward assumes that the INVITE is outside of a dialog, and is thus for the purposes of establishing a new session.
여기서부터의 처리는 INVITE가 다이얼로그 외부에 있으며 따라서 새 세션을 설정하기 위한 목적이라고 가정합니다.
	
> The INVITE may contain a session description, in which case the UAS is being presented with an offer for that session.  It is possible that the user is already a participant in that session, even though the INVITE is outside of a dialog.  This can happen when a user is invited to the same multicast conference by multiple other participants.  If desired, the UAS MAY use identifiers within the session description to detect this duplication.  For example, SDP contains a session id and version number in the origin (o) field.  If the user is already a member of the session, and the session parameters contained in the session description have not changed, the UAS MAY silently accept the INVITE (that is, send a 2xx response without prompting the user).
INVITE에는 session description이 포함될 수 있으며, 이 경우 UAS에 해당 세션에 대한 offer가 표시된다.  INVITE가 다이얼로그 외부에 있더라도 사용자가 이미 해당 세션의 참가자일 수 있다.  이는 사용자가 다른 여러 참가자로부터 동일한 멀티캐스트 회의에 초대를 받은 경우 발생할 수 있습니다.  원하는 경우 UAS는 세션 설명 내의 식별자를 사용하여 이러한 중복을 감지할 수 있다.  예를 들어, SDP에는 오리진(o) 필드에 세션 ID와 버전 번호가 포함되어 있다.  사용자가 이미 세션의 멤버이고 session description에 포함된 세션 매개변수가 변경되지 않은 경우, UAS는 자동으로 INVITE를 수락할 수 있다(즉, 사용자에게 메시지를 표시하지 않고 2xx 응답을 전송).

> If the INVITE does not contain a session description, the UAS is being asked to participate in a session, and the UAC has asked that the UAS provide the offer of the session.  It MUST provide the offer in its first non-failure reliable message back to the UAC.  In this specification, that is a 2xx response to the INVITE.
만약 INVITE 메시지에 session description이 포함되어 있지 않다면, UAS에게 세션에 참여하도록 요청하고, UAC가 UAS에게 세션의 offer를 제공하도록 요청한 것이다. UAS는 첫 번째 실패하지 않는 신뢰할 수 있는 메시지로 UAC에게 offer를 제공해야 한다. 이 명세에서는 이것이 INVITE에 대한 2xx 응답이다.

> The UAS can indicate progress, accept, redirect, or reject the invitation.  In all of these cases, it formulates a response using the procedures described in Section 8.2.6
UAS는 진행 상황을 표시하거나 초대를 수락, 리디렉션 또는 거부할 수 있다.  이러한 모든 경우에 8.2.6절에 설명된 절차를 사용하여 응답을 공식화한다.



13.3.1.1 Progress

> If the UAS is not able to answer the invitation immediately, it can choose to indicate some kind of progress to the UAC (for example, an indication that a phone is ringing).  This is accomplished with a provisional response between 101 and 199.  These provisional responses establish early dialogs and therefore follow the procedures of Section 12.1.1 in addition to those of Section 8.2.6.  A UAS MAY send as many provisional responses as it likes.  Each of these MUST indicate the same dialog ID.  However, these will not be delivered reliably.
UAS가 INVITE에 즉시 응답할 수 없는 경우 UAC에 진행 상황(예: 전화 벨이 울리고 있다는 표시)을 표시하도록 선택할 수 있다. 이는 101 ~ 199 사이의 provisional 응답으로 이루어 진다. 이러한 provisional 응답은 early 다이얼로그를 설정하므로 섹션 8.2.6의 절차에 추가하여 섹션 12.1.1의 절차를 따른다. UAS는 원하는 만큼 많은 provisional 응답을 보낼 수 있다. 각 provisional 응답은 반드시 동일한 다이얼로그 ID를 표시해야 한다. 그러나 이러한 응답은 안정적으로 전달되지 않는다.

> If the UAS desires an extended period of time to answer the INVITE, it will need to ask for an "extension" in order to prevent proxies from canceling the transaction.  A proxy has the option of canceling a transaction when there is a gap of 3 minutes between responses in a transaction.  To prevent cancellation, the UAS MUST send a non-100 provisional response at every minute, to handle the possibility of lost provisional responses.
UAS가 INVITE에 응답하는 데 시간이 더 필요한 경우, 프록시가 트랜잭션을 취소하지 못하도록 "extension"을 요청해야 한다. 플록시는 트랜잭션에서 응답 사이에 3분 간격이 있는 경우 트랜잭션을 취소할 수 있다. 취소를 방지하지 위해 UAS는 매분마다 100이 아닌 provisional 응답을 전송하여 provisional 응답이 손실될 가능성을 처리해야한다.

>	An INVITE transaction can go on for extended durations when the user is placed on hold, or when interworking with PSTN systems which allow communications to take place without answering the call.  The latter is common in Interactive Voice Response (IVR) systems.
	INVITE 트랜잭션은 사용자를 대기 상태로 둘 때나, 응답 없이 통화가 이루어지는 PSTN 시스템과의 상호 운용 시간이 길어질 수 있다. 후자는 대화형 음성 응답 (IVR) 시스템에서 흔히 발생한다.


13.3.1.2 The INVITE is Redirected

> If the UAS decides to redirect the call, a 3xx response is sent.  A 300 (Multiple Choices), 301 (Moved Permanently) or 302 (Moved Temporarily) response SHOULD contain a Contact header field containing one or more URIs of new addresses to be tried.  The response is passed to the INVITE server transaction, which will deal with its retransmissions.
UAS가 통화를 리디렉션하기로 결정하면 3xx 응답이 전송된다. 300 (Multiple Choices), 301 (Moved Permanently) 또는 302 (Moved Temporarily) 응답에는 시도할 새 주소의 URI를 하나 이상 포함하는 연락처 헤더 필드가 포함되어야 한다. 응답은 재전송을 처리하는 INVITE 서버 트랜잭션으로 전달된다.


13.3.1.3 The INVITE is Rejected

> A common scenario occurs when the callee is currently not willing or able to take additional calls at this end system.  A 486 (Busy Here) SHOULD be returned in such a scenario.  If the UAS knows that no other end system will be able to accept this call, a 600 (Busy Everywhere) response SHOULD be sent instead.  However, it is unlikely that a UAS will be able to know this in general, and thus this response will not usually be used.  The response is passed to the INVITE server transaction, which will deal with its retransmissions.
일반적인 시나리오는 발신자(callee)가 현재 이 최종 시스템에서 추가 전화를 받을 의향이 없거나 받을 수 없는 경우에 발생한다. 이러한 시나리오에서는 486 (Busy Here)이 반환되어야 한다. 다른 최종 시스템이 이 호출을 수락할 수 없다는 것을 UAS가 알고 있는 경우 600 (Busy Everywhere) 응답을 대신 보내야 한다. 그러나 일반적으로 UAS가 이를 알 수 없을 가능성이 높으므로 일반적으로 이 응답은 사용되지 않는다. 이 응답은 재전송을 처리하는 INVITE 서버 트랜잭션으로 전달된다.

> A UAS rejecting an offer contained in an INVITE SHOULD return a 488 (Not Acceptable Here) response.  Such a response SHOULD include a Warning header field value explaining why the offer was rejected.
INVITE에 포함된 offer를 거부하는 UAS는 488 (Not Acceptable Here) 응답을 반환해야 한다. 이러한 응답에는 offer가 거부된 이유를 설명하는 Warning 헤더 필드 값이 포함되어야 한다.


13.3.1.4 The INVITE is Accepted

> The UAS core generates a 2xx response.  This response establishes a dialog, and therefore follows the procedures of Section 12.1.1 in addition to those of Section 8.2.6.
UAS 코어는 2xx 응답을 생성한다. 이 응답은 다이얼로그를 설정하므로 섹션 8.2.6의 절차에 추가하여 섹션 12.1.1의 절차를 따른다.

> A 2xx response to an INVITE SHOULD contain the Allow header field and the Supported header field, and MAY contain the Accept header field. Including these header fields allows the UAC to determine the features and extensions supported by the UAS for the duration of the call, without probing.
INVITE에 대한 2xx 응답에는 Allow 헤더 필드와 Supported 헤더 필드가 포함되어야 하며, Accepted 헤더 필드가 포함될 수도 있다. 이러한 헤더 필드를 포함하면 UAC가 탐색 없이 통화 기간 동안 UAS가 지원하는 기능과 확장을 결정할 수 있다.

> If the INVITE request contained an offer, and the UAS had not yet sent an answer, the 2xx MUST contain an answer.  If the INVITE did not contain an offer, the 2xx MUST contain an offer if the UAS had not yet sent an offer.
INVITE 요청에 offer가 포함되어 있고 UAS가 아직 응답을 보내지 않은 경우, 2xx에는 반드시 answer이 포함되어야 합니다.  INVITE에 offer가 포함되어 있지 않은 경우, UAS가 아직 offer를 보내지 않았다면 2xx에 offer가 포함되어 있어야 합니다.

> Once the response has been constructed, it is passed to the INVITE server transaction.  Note, however, that the INVITE server transaction will be destroyed as soon as it receives this final response and passes it to the transport.  Therefore, it is necessary to periodically pass the response directly to the transport until the ACK arrives.  The 2xx response is passed to the transport with an interval that starts at T1 seconds and doubles for each retransmission until it reaches T2 seconds (T1 and T2 are defined in Section 17).  Response retransmissions cease when an ACK request for the response is received.  This is independent of whatever transport protocols are used to send the response.
응답이 작성되면 INVITE 서버 트랜잭션으로 전달된다.  그러나 INVITE 서버 트랜잭션은 이 최종 응답을 수신하여 전송에 전달하는 즉시 소멸된다.  따라서 ACK가 도착할 때까지 주기적으로 응답을 전송에 직접 전달해야 한다.  2xx 응답은 T1 초에서 시작하여 T2 초에 도달 할 때까지 재전송 할 때마다 두 배가되는 간격으로 전송에 전달된다 (T1 및 T2는 섹션 17에 정의되어 있다).  응답 재전송은 응답에 대한 ACK 요청이 수신되면 중단된다.  이는 응답을 전송하는 데 사용되는 전송 프로토콜과는 무관하다.

>	Since 2xx is retransmitted end-to-end, there may be hops between UAS and UAC that are UDP.  To ensure reliable delivery across these hops, the response is retransmitted periodically even if the transport at the UAS is reliable.
	'2xx'는 end-to-end로 재전송되므로 UAS와 UAC 사이에 UDP인 홉이 있을 수 있다.  이러한 홉에서 안정적인 전송을 보장하기 위해 UAS에서의 전송이 안정적이더라도 응답은 주기적으로 재전송된다.
	
> If the server retransmits the 2xx response for 64*T1 seconds without receiving an ACK, the dialog is confirmed, but the session SHOULD be terminated.  This is accomplished with a BYE, as described in Section 15.
서버가 ACK를 수신하지 않고 64*T1초 동안 2xx 응답을 재전송하면 다이얼로그가 confirmed되지만 세션은 종료되어야 한다.  이 작업은 섹션 15에 설명된 대로 BYE를 통해 수행된다.
