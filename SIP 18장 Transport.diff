18. Transport 

> The transport layer is responsible for the actual transmission of requests and responses over network transports.  This includes determination of the connection to use for a request or response in the case of connection-oriented transports.
전송 계층은 네트워크 전송을 통한 요청 및 응답의 실제 전송을 담당한다.  여기에는 연결 지향 전송의 경우 요청 또는 응답에 사용할 연결의 결정이 포함된다.

> The transport layer is responsible for managing persistent connections for transport protocols like TCP and SCTP, or TLS over those, including ones opened to the transport layer.  This includes connections opened by the client or server transports, so that connections are shared between client and server transport functions. These connections are indexed by the tuple formed from the address, port, and transport protocol at the far end of the connection.  When a connection is opened by the transport layer, this index is set to the destination IP, port and transport.  When the connection is accepted by the transport layer, this index is set to the source IP address, port number, and transport.  Note that, because the source port is often ephemeral, but it cannot be known whether it is ephemeral or selected through procedures in [4], connections accepted by the transport layer will frequently not be reused.  The result is that two proxies in a "peering" relationship using a connection- oriented transport frequently will have two connections in use, one for transactions initiated in each direction.
전송 계층은 전송 계층에 열린 연결을 포함하여 TCP 및 SCTP와 같은 전송 프로토콜 또는 이러한 프로토콜을 통한 TLS에 대한 영구 연결을 관리할 책임이 있다.  여기에는 클라이언트 또는 서버 전송에 의해 열린 연결이 포함되므로 클라이언트 및 서버 전송 기능 간에 연결이 공유된다. 이러한 연결은 연결의 맨 끝에 있는 주소, 포트 및 전송 프로토콜로 구성된 튜플로 인덱싱된다.  전송 계층에서 연결이 열리면 이 인덱스는 대상 IP, 포트 및 전송으로 설정된다.  전송 계층에서 연결을 수락하면 이 인덱스는 소스 IP 주소, 포트 번호 및 전송으로 설정된다.  소스 포트는 임시 포트인 경우가 많지만 임시 포트인지 아니면 [4]의 절차를 통해 선택된 포트인지 알 수 없기 때문에 전송 계층에서 수락된 연결은 재사용되지 않는 경우가 많다.  그 결과 연결 지향 전송을 자주 사용하는 "피어링" 관계에 있는 두 프록시는 각 방향에서 시작된 트랜잭션에 대해 하나씩 두 개의 연결을 사용하게 된다.

> It is RECOMMENDED that connections be kept open for some implementation-defined duration after the last message was sent or received over that connection.  This duration SHOULD at least equal the longest amount of time the element would need in order to bring a transaction from instantiation to the terminated state.  This is to make it likely that transactions are completed over the same connection on which they are initiated (for example, request, response, and in the case of INVITE, ACK for non-2xx responses). This usually means at least 64*T1 (see Section 17.1.1.1 for a definition of T1).  However, it could be larger in an element that has a TU using a large value for timer C (bullet 11 of Section 16.6), for example.
해당 연결을 통해 마지막으로 메시지를 보내거나 받은 후 구현에서 정의한 기간 동안 연결을 열어 두는 것이 좋다.  이 기간은 최소한 트랜잭션을 인스턴스화에서 종료 상태로 전환하는 데 필요한 요소의 최장 시간과 같아야 한다.  이는 트랜잭션이 시작된 동일한 연결(예: 요청, 응답, INVITE의 경우 2xx가 아닌 응답에 대한 ACK)을 통해 트랜잭션이 완료될 가능성을 높이기 위한 것이다. 이는 일반적으로 최소 64*T1을 의미한다(T1의 정의는 섹션 17.1.1.1 참조).  그러나 타이머 C에 큰 값을 사용하는 TU가 있는 요소(예: 16.6절의 글머리 기호 11)에서는 이보다 클 수 있다.

> All SIP elements MUST implement UDP and TCP.  SIP elements MAY implement other protocols.
모든 SIP 요소는 반드시 UDP 및 TCP를 구현해야 한다.  SIP 요소는 다른 프로토콜을 구현할 수 있다.

>	Making TCP mandatory for the UA is a substantial change from RFC 2543.  It has arisen out of the need to handle larger messages, which MUST use TCP, as discussed below.  Thus, even if an element never sends large messages, it may receive one and needs to be able to handle them.
	UA에 TCP를 의무화하는 것은 RFC 2543에서 크게 변경된 사항이다.  이는 아래에서 설명하는 것처럼 반드시 TCP를 사용해야 하는 대용량 메시지를 처리해야 할 필요성에서 비롯된 것이다.  따라서 엘리먼트가 대용량 메시지를 보내지 않더라도 메시지를 수신할 수 있으며 이를 처리할 수 있어야 한다.
	

18.1 Clients

18.1.1 Sending requests

> The client side of the transport layer is responsible for sending the request and receiving responses.  The user of the transport layer passes the client transport the request, an IP address, port, transport, and possibly TTL for multicast destinations.
전송 계층의 클라이언트 쪽은 요청을 보내고 응답을 받는 역할을 담당한다.  전송 계층의 사용자는 클라이언트 전송에 요청, IP 주소, 포트, 전송 및 멀티캐스트 대상에 대한 TTL을 전달한다.

> If a request is within 200 bytes of the path MTU, or if it is larger than 1300 bytes and the path MTU is unknown, the request MUST be sent using an RFC 2914 [43] congestion controlled transport protocol, such as TCP. If this causes a change in the transport protocol from the one indicated in the top Via, the value in the top Via MUST be changed.  This prevents fragmentation of messages over UDP and provides congestion control for larger messages.  However, implementations MUST be able to handle messages up to the maximum datagram packet size.  For UDP, this size is 65,535 bytes, including IP and UDP headers.
요청이 경로 MTU의 200바이트 이내이거나 1300바이트보다 크고 경로 MTU를 알 수 없는 경우, 요청은 반드시 TCP와 같은 RFC 2914[43] 혼잡 제어 전송 프로토콜을 사용하여 전송해야 한다. 이로 인해 상단 Via에 표시된 전송 프로토콜이 변경되는 경우, 상단 Via의 값을 변경해야 한다.  이렇게 하면 UDP를 통한 메시지 조각화를 방지하고 더 큰 메시지에 대한 혼잡 제어 기능을 제공한다.  그러나 구현은 최대 데이터그램 패킷 크기까지 메시지를 처리할 수 있어야 한다.  UDP의 경우 이 크기는 IP 및 UDP 헤더를 포함하여 65,535바이트다.

>	The 200 byte "buffer" between the message size and the MTU accommodates the fact that the response in SIP can be larger than the request.  This happens due to the addition of Record-Route header field values to the responses to INVITE, for example.  With the extra buffer, the response can be about 170 bytes larger than the request, and still not be fragmented on IPv4 (about 30 bytes is consumed by IP/UDP, assuming no IPSec).  1300 is chosen when path MTU is not known, based on the assumption of a 1500 byte Ethernet MTU.
	메시지 크기와 MTU 사이의 200바이트 "버퍼"는 SIP의 응답이 요청보다 클 수 있다는 사실을 수용한다.  예를 들어 INVITE에 대한 응답에 Record-Route 헤더 필드 값을 추가하기 때문에 이런 일이 발생한다.  추가 버퍼를 사용하면 응답이 요청보다 약 170바이트 더 커질 수 있지만 IPv4에서는 여전히 조각화되지 않는다(IPSec이 없다고 가정할 때 IP/UDP에서 약 30바이트가 소비됨).  1300은 경로 MTU를 알 수 없는 경우 1500바이트 이더넷 MTU를 가정하여 선택된다.
	
> If an element sends a request over TCP because of these message size constraints, and that request would have otherwise been sent over UDP, if the attempt to establish the connection generates either an ICMP Protocol Not Supported, or results in a TCP reset, the element SHOULD retry the request, using UDP.  This is only to provide backwards compatibility with RFC 2543 compliant implementations that do not support TCP.  It is anticipated that this behavior will be deprecated in a future revision of this specification.
이러한 메시지 크기 제약으로 인해 요소가 TCP를 통해 요청을 전송하고 해당 요청이 다른 경우라면 UDP를 통해 전송되었을 경우, 연결 설정 시도에서 ICMP 프로토콜이 지원되지 않음 또는 TCP 리셋이 발생하면 요소는 UDP를 사용하여 요청을 다시 시도해야 한다.  이는 TCP를 지원하지 않는 RFC 2543 호환 구현과의 하위 호환성을 제공하기 위한 것이다.  이 동작은 향후 이 사양의 개정에서 더 이상 사용되지 않을 것으로 예상된다.

> A client that sends a request to a multicast address MUST add the "maddr" parameter to its Via header field value containing the destination multicast address, and for IPv4, SHOULD add the "ttl" parameter with a value of 1.  Usage of IPv6 multicast is not defined in this specification, and will be a subject of future standardization when the need arises.
멀티캐스트 주소로 요청을 보내는 클라이언트는 대상 멀티캐스트 주소가 포함된 Via 헤더 필드 값에 "maddr" 파라미터를 추가해야 하며, IPv4의 경우 값이 1인 "ttl" 파라미터를 추가해야 한다. IPv6 멀티캐스트의 사용법은 이 사양에 정의되어 있지 않으며 향후 필요 시 표준화의 대상이 될 예정이다.

> These rules result in a purposeful limitation of multicast in SIP. Its primary function is to provide a "single-hop-discovery-like" service, delivering a request to a group of homogeneous servers, where it is only required to process the response from any one of them.  This functionality is most useful for registrations.  In fact, based on the transaction processing rules in Section 17.1.3, the client transaction will accept the first response, and view any others as retransmissions because they all contain the same Via branch identifier.
이러한 규칙으로 인해 SIP에서 멀티캐스트는 의도적으로 제한된다. 멀티캐스트의 주요 기능은 "single-hop-discovery-like" 서비스를 제공하여 동종 서버 그룹에 요청을 전달하고, 이 중 한 서버의 응답만 처리하면 되는 것이다.  이 기능은 등록에 가장 유용하다.  실제로 섹션 17.1.3의 트랜잭션 처리 규칙에 따라 클라이언트 트랜잭션은 첫 번째 응답을 수락하고 다른 모든 응답은 모두 동일한 Via 브랜치 식별자를 포함하므로 재전송으로 간주한다.

> Before a request is sent, the client transport MUST insert a value of the "sent-by" field into the Via header field.  This field contains an IP address or host name, and port.  The usage of an FQDN is RECOMMENDED.  This field is used for sending responses under certain conditions, described below.  If the port is absent, the default value depends on the transport.  It is 5060 for UDP, TCP and SCTP, 5061 for TLS.
요청이 전송되기 전에 클라이언트 전송은 반드시 '보낸 사람' 필드 값을 Via 헤더 필드에 삽입해야 한다.  이 필드에는 IP 주소 또는 호스트 이름과 포트가 포함된다.  FQDN 사용을 권장한다.  이 필드는 아래에 설명된 특정 조건에서 응답을 전송하는 데 사용된다.  포트가 없는 경우 기본값은 전송에 따라 달라진다.  UDP, TCP 및 SCTP의 경우 5060, TLS의 경우 5061이다.

> For reliable transports, the response is normally sent on the connection on which the request was received.  Therefore, the client transport MUST be prepared to receive the response on the same connection used to send the request.  Under error conditions, the server may attempt to open a new connection to send the response.  To handle this case, the transport layer MUST also be prepared to receive an incoming connection on the source IP address from which the request was sent and port number in the "sent-by" field.  It also MUST be prepared to receive incoming connections on any address and port that would be selected by a server based on the procedures described in Section 5 of [4].
안정적인 전송을 위해 응답은 일반적으로 요청이 수신된 연결에서 전송된다.  따라서 클라이언트 전송은 요청을 전송하는 데 사용된 것과 동일한 연결에서 응답을 받을 수 있도록 준비해야 한다.  오류 조건에서 서버는 응답을 전송하기 위해 새 연결을 열려고 시도할 수 있다.  이 경우를 처리하기 위해 전송 계층은 요청이 전송된 소스 IP 주소와 '보낸 사람' 필드의 포트 번호로 들어오는 연결을 수신할 준비가 되어 있어야 한다.  또한 [4]의 섹션 5에 설명된 절차에 따라 서버가 선택한 모든 주소와 포트에서 들어오는 연결을 수신할 준비가 되어 있어야 한다.

> For unreliable unicast transports, the client transport MUST be prepared to receive responses on the source IP address from which the request is sent (as responses are sent back to the source address) and the port number in the "sent-by" field.  Furthermore, as with reliable transports, in certain cases the response will be sent elsewhere.  The client MUST be prepared to receive responses on any address and port that would be selected by a server based on the procedures described in Section 5 of [4].
신뢰할 수 없는 유니캐스트 전송의 경우 클라이언트 전송은 요청이 전송된 소스 IP 주소(응답이 소스 주소로 다시 전송되므로)와 'sent-by' 필드의 포트 번호에 대한 응답을 수신할 준비가 되어 있어야 한다.  또한 신뢰할 수 있는 전송과 마찬가지로 특정 경우에는 응답이 다른 곳으로 전송될 수 있다.  클라이언트는 [4]의 섹션 5에 설명된 절차에 따라 서버가 선택한 모든 주소와 포트에서 응답을 받을 준비가 되어 있어야 한다.

> For multicast, the client transport MUST be prepared to receive responses on the same multicast group and port to which the request is sent (that is, it needs to be a member of the multicast group it sent the request to.)
멀티캐스트의 경우 클라이언트 전송은 요청이 전송된 동일한 멀티캐스트 그룹 및 포트에서 응답을 받을 준비가 되어 있어야 한다(즉, 요청을 전송한 멀티캐스트 그룹의 구성원이어야 함).

> If a request is destined to an IP address, port, and transport to which an existing connection is open, it is RECOMMENDED that this connection be used to send the request, but another connection MAY be opened and used.
요청이 기존 연결이 열려 있는 IP 주소, 포트 및 전송으로 전송되는 경우 이 연결을 사용하여 요청을 전송하는 것이 좋지만 다른 연결을 열어 사용할 수도 있다.

> If a request is sent using multicast, it is sent to the group address, port, and TTL provided by the transport user.  If a request is sent using unicast unreliable transports, it is sent to the IP address and port provided by the transport user.
멀티캐스트를 사용하여 요청을 전송하는 경우 전송 사용자가 제공한 그룹 주소, 포트 및 TTL로 요청이 전송된다.  요청이 유니캐스트의 신뢰할 수 없는 전송을 사용하여 전송되는 경우 전송 사용자가 제공한 IP 주소와 포트로 전송된다.


18.1.2 Receiving Responses

> When a response is received, the client transport examines the top Via header field value.  If the value of the "sent-by" parameter in that header field value does not correspond to a value that the client transport is configured to insert into requests, the response MUST be silently discarded.
응답이 수신되면 클라이언트 전송은 최상위 Via 헤더 필드 값을 검사한다.  해당 헤더 필드 값의 "sent-by" 매개변수 값이 클라이언트 전송이 요청에 삽입하도록 구성된 값과 일치하지 않으면 응답을 자동으로 폐기한다.

> If there are any client transactions in existence, the client transport uses the matching procedures of Section 17.1.3 to attempt to match the response to an existing transaction.  If there is a match, the response MUST be passed to that transaction.  Otherwise, the response MUST be passed to the core (whether it be stateless proxy, stateful proxy, or UA) for further processing.  Handling of these "stray" responses is dependent on the core (a proxy will forward them, while a UA will discard, for example).
클라이언트 트랜잭션이 존재하는 경우 클라이언트 전송은 섹션 17.1.3의 매칭 절차를 사용하여 응답을 기존 트랜잭션과 일치시키려고 시도한다.  일치하는 것이 있으면 응답을 해당 트랜잭션으로 전달해야 한다.  그렇지 않으면 추가 처리를 위해 응답을 코어(stateless 프록시, stateful 프록시 또는 UA 등)로 전달해야 한다.  이러한 "stray" 응답의 처리는 코어에 따라 달라진다(예를 들어 프록시는 응답을 전달하고 UA는 삭제).


18.2 Server

18.2.1 Receiving Requests

> A server SHOULD be prepared to receive requests on any IP address, port and transport combination that can be the result of a DNS lookup on a SIP or SIPS URI [4] that is handed out for the purposes of communicating with that server.  In this context, "handing out" includes placing a URI in a Contact header field in a REGISTER request or a redirect response, or in a Record-Route header field in a request or response.  A URI can also be "handed out" by placing it on a web page or business card.  It is also RECOMMENDED that a server listen for requests on the default SIP ports (5060 for TCP and UDP, 5061 for TLS over TCP) on all public interfaces.  The typical exception would be private networks, or when multiple server instances are running on the same host.  For any port and interface that a server listens on for UDP, it MUST listen on that same port and interface for TCP.  This is because a message may need to be sent using TCP, rather than UDP, if it is too large.  As a result, the converse is not true.  A server need not listen for UDP on a particular address and port just because it is listening on that same address and port for TCP.  There may, of course, be other reasons why a server needs to listen for UDP on a particular address and port.
서버는 해당 서버와의 통신을 목적으로 전달되는 SIP 또는 SIPS URI[4]에 대한 DNS 조회 결과일 수 있는 모든 IP 주소, 포트 및 전송 조합에 대한 요청을 수신할 준비가 되어 있어야 한다.  여기서 "handing out"이란 REGISTER 요청 또는 리디렉션 응답의 Contact 헤더 필드 또는 요청 또는 응답의 Record-Route 헤더 필드에 URI를 배치하는 것을 포함한다.  웹 페이지나 명함에 URI를 배치하여 "handing out"할 수도 있다.  또한 서버는 모든 공용 인터페이스에서 기본 SIP 포트(TCP 및 UDP의 경우 5060, TLS over TCP의 경우 5061)에서 요청을 수신 대기할 것을 권장한다.  일반적인 예외는 사설 네트워크 또는 동일한 호스트에서 여러 서버 인스턴스가 실행 중인 경우이다.  서버가 UDP에 대해 수신 대기하는 포트 및 인터페이스에 대해서는 반드시 동일한 포트 및 인터페이스에서 TCP에 대해서도 수신 대기해야 한다.  메시지가 너무 큰 경우 UDP가 아닌 TCP를 사용하여 전송해야 할 수도 있기 때문이다.  결과적으로 그 반대는 사실이 아니다.  서버가 동일한 주소와 포트에서 TCP를 수신 대기하고 있다고 해서 특정 주소와 포트에서 UDP를 수신 대기할 필요는 없다.  물론 서버가 특정 주소와 포트에서 UDP를 수신 대기해야 하는 다른 이유가 있을 수 있다.

> When the server transport receives a request over any transport, it MUST examine the value of the "sent-by" parameter in the top Via header field value.  If the host portion of the "sent-by" parameter contains a domain name, or if it contains an IP address that differs from the packet source address, the server MUST add a "received" parameter to that Via header field value.  This parameter MUST contain the source address from which the packet was received.  This is to assist the server transport layer in sending the response, since it must be sent to the source IP address from which the request came.
서버 전송이 모든 전송을 통해 요청을 수신하면 상단 Via 헤더 필드 값의 "sent-by" 매개변수 값을 검사해야 한다.  "sent-by" 매개변수의 호스트 부분에 도메인 이름이 포함되어 있거나 패킷 소스 주소와 다른 IP 주소가 포함되어 있는 경우 서버는 해당 Via 헤더 필드 값에 "received" 매개변수를 추가해야 한다.  이 매개변수에는 패킷을 수신한 소스 주소가 반드시 포함되어야 한다.  이는 서버 전송 계층이 응답을 전송할 때 요청이 들어온 소스 IP 주소로 응답을 보내야 하기 때문이다.

> Consider a request received by the server transport which looks like, in part:
서버 전송이 수신한 요청이 부분적으로 다음과 같이 보인다고 가정한다:

	INVITE sip:bob@Biloxi.com SIP/2.0
	Via: SIP/2.0/UDP bobspc.biloxi.com:5060
	
> The request is received with a source IP address of 192.0.2.4. Before passing the request up, the transport adds a "received" parameter, so that the request would look like, in part:
요청은 192.0.2.4의 소스 IP 주소로 수신된다. 요청을 전달하기 전에 전송은 "received" 매개 변수를 추가하여 요청이 부분적으로 다음과 같이 보이도록 한다:

	INVITE sip:bob@Biloxi.com SIP/2.0
	Via: SIP/2.0/UDP bobspc.biloxi.com:5060;received=192.0.2.4
	
> Next, the server transport attempts to match the request to a server transaction.  It does so using the matching rules described in Section 17.2.3.  If a matching server transaction is found, the request is passed to that transaction for processing.  If no match is found, the request is passed to the core, which may decide to construct a new server transaction for that request.  Note that when a UAS core sends a 2xx response to INVITE, the server transaction is destroyed.  This means that when the ACK arrives, there will be no matching server transaction, and based on this rule, the ACK is passed to the UAS core, where it is processed.
다음으로 서버 전송은 요청을 서버 트랜잭션과 일치시키려고 시도한다.  17.2.3절에 설명된 매칭 규칙을 사용하여 매칭을 시도한다.  일치하는 서버 트랜잭션이 발견되면 요청은 처리를 위해 해당 트랜잭션으로 전달된다.  일치하는 트랜잭션을 찾지 못하면 요청이 코어로 전달되며, 코어는 해당 요청에 대해 새 서버 트랜잭션을 구성하기로 결정할 수 있다.  UAS 코어가 INVITE에 2xx 응답을 보내면 서버 트랜잭션이 삭제된다는 점에 유의하라.  즉, ACK가 도착하면 일치하는 서버 트랜잭션이 없으며, 이 규칙에 따라 ACK가 UAS 코어로 전달되어 처리된다.


18.2.2 Sending Responses

> The server transport uses the value of the top Via header field in order to determine where to send a response.  It MUST follow the following process:
서버 전송은 응답을 전송할 위치를 결정하기 위해 상단 Via 헤더 필드의 값을 사용한다.  반드시 다음 프로세스를 따라야 한다:

>	o  If the "sent-protocol" is a reliable transport protocol such as TCP or SCTP, or TLS over those, the response MUST be sent using the existing connection to the source of the original request that created the transaction, if that connection is still open. This requires the server transport to maintain an association between server transactions and transport connections.  If that connection is no longer open, the server SHOULD open a connection to the IP address in the "received" parameter, if present, using the port in the "sent-by" value, or the default port for that transport, if no port is specified.  If that connection attempt fails, the server SHOULD use the procedures in [4] for servers in order to determine the IP address and port to open the connection and send the response to.
	o 'sent-protocol'이 TCP 또는 SCTP와 같은 신뢰할 수 있는 전송 프로토콜 또는 이를 통한 TLS인 경우, 해당 연결이 아직 열려 있는 경우 트랜잭션을 생성한 원래 요청의 소스에 대한 기존 연결을 사용하여 응답을 보내야 한다. 이를 위해서는 서버 전송이 서버 트랜잭션과 전송 연결 간의 연결을 유지해야 한다.  해당 연결이 더 이상 열려 있지 않으면 서버는 "received" 매개 변수에 있는 IP 주소(있는 경우)에 "sent-by" 값의 포트를 사용하거나 포트가 지정되지 않은 경우 해당 전송의 기본 포트를 사용하여 연결을 열어야 한다.  연결 시도가 실패하면 서버는 서버에 대한 [4]의 절차를 사용하여 연결을 열고 응답을 전송할 IP 주소와 포트를 결정해야 한다.
	
>	o  Otherwise, if the Via header field value contains a "maddr" parameter, the response MUST be forwarded to the address listed there, using the port indicated in "sent-by", or port 5060 if none is present.  If the address is a multicast address, the response SHOULD be sent using the TTL indicated in the "ttl" parameter, or with a TTL of 1 if that parameter is not present.
	o 그렇지 않으면 Via 헤더 필드 값에 "maddr" 매개 변수가 포함된 경우 응답은 "sent-by"에 표시된 포트(포트가 없는 경우 5060 포트)를 사용하여 여기에 나열된 주소로 전달되어야 한다.  주소가 멀티캐스트 주소인 경우 응답은 "ttl" 매개변수에 표시된 TTL을 사용하거나 해당 매개변수가 없는 경우 TTL을 1로 설정하여 전송해야 한다.
	
>	o  Otherwise (for unreliable unicast transports), if the top Via has a "received" parameter, the response MUST be sent to the address in the "received" parameter, using the port indicated in the "sent-by" value, or using port 5060 if none is specified explicitly.  If this fails, for example, elicits an ICMP "port unreachable" response, the procedures of Section 5 of [4] SHOULD be used to determine where to send the response.
	o 그렇지 않은 경우(신뢰할 수 없는 유니캐스트 전송의 경우), 최상위 Via에 "received" 매개변수가 있는 경우 응답은 "sent-by" 값에 표시된 포트를 사용하거나 포트가 명시적으로 지정되지 않은 경우 포트 5060을 사용하여 "received" 매개변수에 있는 주소로 전송해야 한다.  이 방법이 실패하는 경우(예: ICMP "port unreachable" 응답이 표시되는 경우) [4] 섹션 5의 절차에 따라 응답을 전송할 위치를 결정해야 한다.
	
>	o  Otherwise, if it is not receiver-tagged, the response MUST be sent to the address indicated by the "sent-by" value, using the procedures in Section 5 of [4].
	o 그렇지 않으면 수신자 태그가 지정되지 않은 경우 [4] 섹션 5의 절차에 따라 'sent-by' 값으로 표시된 주소로 응답을 보내야 한다.


18.3 Framing

> In the case of message-oriented transports (such as UDP), if the message has a Content-Length header field, the message body is assumed to contain that many bytes.  If there are additional bytes in the transport packet beyond the end of the body, they MUST be discarded.  If the transport packet ends before the end of the message body, this is considered an error.  If the message is a response, it MUST be discarded.  If the message is a request, the element SHOULD generate a 400 (Bad Request) response.  If the message has no Content-Length header field, the message body is assumed to end at the end of the transport packet.	
메시지 지향 전송(예: UDP)의 경우 메시지에 Content-Length 헤더 필드가 있는 경우 메시지 본문에 해당 바이트가 포함된 것으로 간주한다.  전송 패킷에 body 끝을 넘어서는 추가 바이트가 있는 경우 반드시 버려야 한다.  전송 패킷이 메시지 body가 끝나기 전에 끝나면 오류로 간주된다.  메시지가 응답인 경우 반드시 삭제해야 한다.  메시지가 요청인 경우 요소는 400(Bad Request) 응답을 생성해야 한다.  메시지에 Content-Length 헤더 필드가 없는 경우 메시지 body은 전송 패킷의 끝에서 끝나는 것으로 간주된다.

> In the case of stream-oriented transports such as TCP, the Content-Length header field indicates the size of the body.  The Content- Length header field MUST be used with stream oriented transports.
TCP와 같은 스트림 지향 전송의 경우 Content-Length 헤더 필드는 body의 크기를 나타낸다.  스트림 지향 전송에서는 Content-Length 헤더 필드를 반드시 사용해야 한다.


18.4 Error Handling

> Error handling is independent of whether the message was a request or response.
오류 처리는 메시지가 요청인지 응답인지에 관계없이 이루어진다.

> If the transport user asks for a message to be sent over an unreliable transport, and the result is an ICMP error, the behavior depends on the type of ICMP error.  Host, network, port or protocol unreachable errors, or parameter problem errors SHOULD cause the transport layer to inform the transport user of a failure in sending. Source quench and TTL exceeded ICMP errors SHOULD be ignored.
전송 사용자가 신뢰할 수 없는 전송을 통해 메시지를 전송하도록 요청하고 그 결과 ICMP 오류가 발생하는 경우, 동작은 ICMP 오류 유형에 따라 달라진다.  호스트, 네트워크, 포트 또는 프로토콜에 연결할 수 없는 오류 또는 매개변수 문제 오류로 인해 전송 계층에서 전송 사용자에게 전송 실패를 알려야 한다. 소스 퀀치 및 TTL 초과 ICMP 오류는 무시해야 한다.

> If the transport user asks for a request to be sent over a reliable transport, and the result is a connection failure, the transport layer SHOULD inform the transport user of a failure in sending.
전송 사용자가 신뢰할 수 있는 전송을 통해 요청을 전송하도록 요청하고 그 결과 연결이 실패한 경우 전송 계층은 전송 사용자에게 전송 실패를 알려야 한다.

